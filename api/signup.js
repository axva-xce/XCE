import bcrypt from 'bcryptjs'; import jwt from 'jsonwebtoken'; import { readAccount, writeAccount } from './db'; export const config = { api: { bodyParser: true, }, }; export default async function handler(req, res) { console.warn(`/api/signup ${req.method} invoked`); if (req.method === 'GET') { return res.status(200).send('Signup endpoint is live') } if (req.method !== 'POST') { return res.status(405).end() } console.warn('POST /api/signup body:', req.body); let username, password, email; try { const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body; username = body.username; password = body.password; email = body.email; if (!username || !password || !email) { return res.status(400).json({ error: 'Username, password, and email are required.' }) } } catch (err) { console.error('Invalid JSON in request body', err); return res.status(400).json({ error: 'Invalid JSON' }) } try { const existingAccount = await readAccount(username); if (existingAccount) { return res.status(400).json({ error: 'Username taken' }) } } catch (err) { console.error('Error reading account from DB', err); return res.status(500).json({ error: 'Database error' }) } let passwordHash; try { passwordHash = await bcrypt.hash(password, 10) } catch (err) { console.error('Error hashing password', err); return res.status(500).json({ error: 'Hashing error' }) } const newAccount = { username, passwordHash, email, tier: 'T1', status: 'free', stripeSubscriptionId: null, currentPeriodEnd: 0, }; try { await writeAccount(newAccount) } catch (err) { console.error('Error writing account to DB', err); return res.status(500).json({ error: 'Database error' }) } let token; try { token = jwt.sign({ username }, process.env.JWT_SECRET, { expiresIn: '1h', }) } catch (err) { console.error('Error signing JWT', err); return res.status(500).json({ error: 'Token error' }) } console.warn(`New user signed up: ${username}`); res.status(201).json({ token }) }