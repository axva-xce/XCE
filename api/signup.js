import bcrypt from 'bcryptjs'; import jwt from 'jsonwebtoken'; import { readAccount, writeAccount } from './db'; export const config = { api: { bodyParser: true, }, }; export default async function handler(req, res) { console.warn(`/api/signup ${req.method} invoked`); if (req.method !== 'POST') { return res.status(405).end() } let username, password, email; try { const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body; username = body.username; password = body.password; email = body.email; if (!username || !password || !email) { return res.status(400).json({ error: 'Username, password, and email are required.' }) } } catch (err) { return res.status(400).json({ error: 'Invalid JSON' }) } try { let accountToSave; let httpStatus = 201; const existingAccount = await readAccount(username); if (existingAccount) { if (existingAccount.passwordHash) { return res.status(400).json({ error: 'Username taken' }) } accountToSave = existingAccount; httpStatus = 200 } else { accountToSave = { username, tier: 'T1', status: 'free', stripeSubscriptionId: null, currentPeriodEnd: 0, } } const passwordHash = await bcrypt.hash(password, 10); accountToSave.passwordHash = passwordHash; accountToSave.email = email; await writeAccount(accountToSave); const token = jwt.sign({ username: accountToSave.username }, process.env.JWT_SECRET, { expiresIn: '1h', }); console.warn(`User processed: ${username}. Status: ${httpStatus}`); res.status(httpStatus).json({ token }) } catch (err) { console.error('Error during signup process', err); return res.status(500).json({ error: 'Internal server error' }) } }