import { findAccount } from './db'; import nodemailer from 'nodemailer'; import { Redis } from '@upstash/redis'; console.log('[request-password-reset.js] Module loading...'); let redisClientForCodes; let essentialEnvVarsOk = true; if (!process.env.UPSTASH_REDIS_REST_URL) { console.error('[request-password-reset.js] FATAL ERROR: UPSTASH_REDIS_REST_URL environment variable is not set.'); essentialEnvVarsOk = false } if (!process.env.UPSTASH_REDIS_REST_TOKEN) { console.error('[request-password-reset.js] FATAL ERROR: UPSTASH_REDIS_REST_TOKEN environment variable is not set.'); essentialEnvVarsOk = false } if (!process.env.EMAIL_USER) { console.error('[request-password-reset.js] FATAL ERROR: EMAIL_USER environment variable is not set.'); essentialEnvVarsOk = false } if (!process.env.EMAIL_PASS) { console.error('[request-password-reset.js] FATAL ERROR: EMAIL_PASS environment variable is not set.'); essentialEnvVarsOk = false } if (essentialEnvVarsOk) { try { redisClientForCodes = new Redis({ url: process.env.UPSTASH_REDIS_REST_URL, token: process.env.UPSTASH_REDIS_REST_TOKEN, }); console.log('[request-password-reset.js] Redis client for codes initialized.') } catch (e) { console.error('[request-password-reset.js] FATAL ERROR: Could not initialize Redis client for codes.', e); essentialEnvVarsOk = false } } else { console.error('[request-password-reset.js] Skipping Redis client initialization due to missing essential environment variables.') } console.log(`[request-password-reset.js] Essential Env Vars OK: ${essentialEnvVarsOk}`); export const config = { api: { bodyParser: true, }, }; function generateResetCode() { return Math.floor(100000 + Math.random() * 900000).toString() } export default async function handler(req, res) { console.log(`[Handler] /api/request-password-reset ${req.method} invoked. Request ID: ${req.headers['x-vercel-id'] || 'N/A'}`); if (!essentialEnvVarsOk || !redisClientForCodes) { console.error(`[Handler] Cannot process request. Essential setup failed.`); return res.status(500).json({ error: 'Server configuration error. Service unavailable.' }) } if (req.method !== 'POST') { res.setHeader('Allow', 'POST'); return res.status(405).json({ error: `Method ${req.method} Not Allowed` }) } let emailToReset; try { const requestBody = typeof req.body === 'string' ? JSON.parse(req.body) : req.body; emailToReset = requestBody.email; if (!emailToReset || typeof emailToReset !== 'string') { console.warn('[Handler] Missing or invalid email in request body:', req.body); return res.status(400).json({ error: 'Email is required' }) } } catch (err) { console.error('[Handler] Invalid JSON in request body', err); return res.status(400).json({ error: 'Invalid JSON' }) } console.warn(`[Handler] Password reset requested for email: ${emailToReset}`); try { const accountExists = await findAccount(acc => acc.email === emailToReset); if (accountExists) { console.warn(`[Handler] Account found for email: ${emailToReset} (user: ${accountExists.username}). Initiating password reset.`); const resetCode = generateResetCode(); const redisKey = `password_reset_code:${emailToReset}`; await redisClientForCodes.set(redisKey, resetCode, { ex: 15 * 60 }); const transporter = nodemailer.createTransport({ host: 'smtp.office365.com', port: 587, secure: false, auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS, }, tls: { ciphers: 'SSLv3' } }); const mailOptions = { from: `"XCE No Reply" <${process.env.EMAIL_USER}>`, to: emailToReset, subject: 'Your XCE Password Reset Code', text: `Hello ${accountExists.username || 'User'},\n\nYour password reset code is: ${resetCode}\n\nThis code will expire in 15 minutes.\n\nIf you did not request a password reset, please ignore this email.\n\nThanks,\nThe XCE Team`, html: `<p>Hello ${accountExists.username || 'User'},</p><p>Your password reset code is: <strong>${resetCode}</strong></p><p>This code will expire in 15 minutes.</p><p>If you did not request a password reset, please ignore this email.</p><p>Thanks,<br>The XCE Team</p>`, }; await transporter.sendMail(mailOptions); console.warn(`[Handler] Password reset email sent to ${emailToReset}.`) } else { console.warn(`[Handler] No account found for email: ${emailToReset}. Still returning generic success message to prevent enumeration.`) } console.log("[Handler] Processing complete. Returning generic success message."); return res.status(200).json({ message: 'If an account with that email address exists, instructions to reset your password have been sent.' }) } catch (err) { console.error('[Handler] Error during password reset request processing:', err); return res.status(500).json({ error: 'An internal server error occurred.' }) } }