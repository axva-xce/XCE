import { buffer } from 'micro'; import Stripe from 'stripe'; import { upsertAccount } from './account.js'; import { findAccount } from './db.js'; export const config = { api: { bodyParser: false } }; const stripe = new Stripe(process.env.TEST_STRIPE_SECRET_KEY); export default async function handler(req, res) { if (req.method !== 'POST') { res.setHeader('Allow', 'POST'); return res.status(405).end('Method Not Allowed') } let event; try { const buf = await buffer(req); event = stripe.webhooks.constructEvent(buf, req.headers['stripe-signature'], process.env.TEST_STRIPE_WEBHOOK_SECRET); console.warn(`Stripe event: ${event.type}`) } catch (err) { console.error('Webhook signature failed:', err.message); return res.status(400).send(`Webhook Error: ${err.message}`) } const obj = event.data.object; let sub; let username; if (event.type === 'checkout.session.completed') { username = (obj.custom_fields || []).find(f => f.key === 'xceusername')?.text?.value; if (obj.subscription) { sub = await stripe.subscriptions.retrieve(obj.subscription) } console.warn(`Checkout session username: ${username || '<none>'}`) } else if (['invoice.payment_succeeded', 'customer.subscription.updated', 'customer.subscription.deleted'].includes(event.type)) { const subscriptionId = obj.subscription || obj.id; if (subscriptionId) { sub = obj.object === 'subscription' ? obj : await stripe.subscriptions.retrieve(subscriptionId); const account = await findAccount(acc => acc.stripeSubscriptionId === subscriptionId); if (account) { username = account.username; console.warn(`Found user '${username}' via subscription ID ${subscriptionId}`) } else { console.error(`CRITICAL: No account found for subscription ID ${subscriptionId}`) } } } if (sub && username) { try { const acct = await upsertAccount({ username, sub }); console.warn(`Upserted ${acct.username} â†’ tier=${acct.tier}, expiresUnix=${acct.currentPeriodEnd}`) } catch (err) { console.error('upsertAccount error:', err); return res.status(500).end() } } else { console.warn('Skipping upsert: missing username or subscription object.') } res.json({ received: true }) }