import bcrypt from 'bcryptjs'; import jwt from 'jsonwebtoken'; import { readAccount, findAccount } from './db.js'; export default async function handler(req, res) { if (req.method !== 'POST') { res.setHeader('Allow', 'POST'); return res.status(405).json({ error: 'Method Not Allowed' }); } let identifier, password; try { const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body; identifier = body.username || body.email; password = body.password; } catch (e) { return res.status(400).json({ error: 'Invalid JSON request body' }); } if (!identifier || !password) { return res.status(400).json({ error: 'Username/email and password are required' }); } try { let account = null; const isEmail = identifier.includes('@'); if (isEmail) { console.log(`Attempting login with email: ${identifier}`); account = await findAccount(acc => acc.email === identifier); } else { console.log(`Attempting login with username: ${identifier}`); account = await readAccount(identifier); } if (!account || !account.passwordHash || !(await bcrypt.compare(password, account.passwordHash))) { return res.status(401).json({ error: 'Invalid credentials' }); } const token = jwt.sign({ username: account.username, tier: account.tier }, process.env.JWT_SECRET, { expiresIn: '1h' }); console.log(`Login successful for user: ${account.username}`); res.status(200).json({ token }); } catch (err) { console.error('Internal server error during login:', err); res.status(500).json({ error: 'An internal server error occurred.' }); } }