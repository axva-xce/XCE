import { Redis } from "@upstash/redis"; const redis = new Redis({ url: process.env.UPSTASH_REDIS_REST_URL, token: process.env.UPSTASH_REDIS_REST_TOKEN }); export async function readAccount(username) { if (!username) return null; const account = await redis.hgetall(`account:${username}`); if (!account || Object.keys(account).length === 0) { return null; } if (account.currentPeriodEnd) { account.currentPeriodEnd = parseInt(account.currentPeriodEnd, 10); } else { account.currentPeriodEnd = 0; } return account; } export async function writeAccount(account) { if (!account || !account.username) { throw new Error("writeAccount requires an account object with a username") } const tx = redis.multi(); tx.hset(`account:${account.username}`, account); tx.sadd("usernames", account.username); await tx.exec() } export async function listUsernames() { return await redis.smembers("usernames") } export async function findAccount(predicate) { const allUsernames = await listUsernames(); for (const username of allUsernames) { const account = await readAccount(username); if (account && predicate(account)) { return account } } return undefined }